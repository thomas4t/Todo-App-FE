{"version":3,"sources":["components/AddTodoForm.js","components/Todo.js","components/Todos.js","components/ClearTodos.js","App.js","reducers/rootReducer.js","index.js"],"names":["AddTodoForm","props","addTodoValue","useSelector","state","dispatch","useDispatch","style","width","margin","minWidth","onSubmit","e","preventDefault","length","addTodo","type","val","value","onChange","target","label","size","className","color","StyledEdiText","styled","EdiText","completed","Todo","display","justifyContent","IconButton","onClick","markTodo","todo","fontSize","cancelOnUnfocus","buttonsAlign","showButtonsOnHover","submitOnEnter","cancelOnEscape","text","onSave","onTodoEditSave","id","deleteTodo","icon","Todos","todos","todosStyle","padding","textAlign","hover","map","key","StyledClearBtn","clearTodos","axios","require","default","App","loadingTodos","useEffect","fetch","process","method","then","Response","json","catch","err","console","log","post","response","statusText","newTodos","data","updatedTodos","parTodo","urlPerk","delete","filtered","filter","ClearTodos","initialState","rootReducer","action","newState","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c5b933b1.chunk.js","sourcesContent":["import React from \"react\";\nimport { MDBInput } from \"mdbreact\";\nimport { MDBBtn } from \"mdbreact\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction AddTodoForm(props) {\n  const addTodoValue = useSelector((state) => state.addTodoValue);\n  const dispatch = useDispatch();\n\n  const onInputChange = (e) => {\n    dispatch({\n      type: \"SET_ADD_TODO_VALUE\",\n      val: e.target.value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (addTodoValue.length !== 0 && addTodoValue.length < 40) {\n      props.addTodo(addTodoValue);\n      dispatch({\n        type: \"SET_ADD_TODO_VALUE\",\n        val: \"\",\n      });\n    }\n  };\n\n  const formStyle = {\n    width: \"400px\",\n    margin: \"20px auto\",\n    minWidth: \"250px\",\n  };\n\n  return (\n    <>\n      <form style={formStyle} onSubmit={handleSubmit}>\n        <MDBInput\n          value={addTodoValue}\n          onChange={onInputChange}\n          label=\"What needs to be done?\"\n          size=\"lg\"\n        />\n        <MDBBtn className=\"btn\" type=\"submit\" color=\"primary\">\n          Add\n        </MDBBtn>\n      </form>\n    </>\n  );\n}\n\nexport default AddTodoForm;\n","import React from \"react\";\nimport { MDBBtn, MDBIcon } from \"mdbreact\";\n\nimport EdiText from \"react-editext\";\nimport styled from \"styled-components\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CheckCircleOutlineOutlinedIcon from \"@material-ui/icons/CheckCircleOutlineOutlined\";\nimport \"../css/btnNoOutline.css\";\n\nconst StyledEdiText = styled(EdiText)`\n  display: flex;\n  justify-content: center;\n  flex-grow: 1;\n  input,\n  textarea,\n  div[editext=\"view-container\"] {\n    text-decoration: ${(props) => (props.completed ? \"line-through\" : \"none\")};\n    font-weight: ${(props) => (props.completed ? \"normal\" : \"bold\")};\n  }\n  button {\n    border: none;\n    background: none;\n    background-color: none;\n    margin-right: 5px;\n  }\n  button:hover {\n    border-radius: 25%;\n    background-color: rgba(63, 81, 181, 0.2);\n  }\n`;\n\nfunction Todo(props) {\n  const todoStyle = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  };\n  const handleMarkTodo = () => {\n    props.markTodo(props.todo);\n  };\n\n  let handleTodoEditSave = (val) => {\n    props.onTodoEditSave(props.todo.id, val);\n  };\n\n  return (\n    <td style={todoStyle}>\n      <IconButton\n        onClick={() => handleMarkTodo()}\n        color={props.todo.completed ? \"default\" : \"primary\"}\n      >\n        {\" \"}\n        <CheckCircleOutlineOutlinedIcon fontSize=\"inherit\" />\n      </IconButton>\n      <StyledEdiText\n        cancelOnUnfocus\n        buttonsAlign=\"before\"\n        showButtonsOnHover\n        submitOnEnter\n        cancelOnEscape\n        type=\"text\"\n        value={props.todo.text}\n        onSave={handleTodoEditSave}\n        completed={props.todo.completed}\n      />\n      <MDBBtn\n        type=\"button\"\n        onClick={() => props.deleteTodo(props.todo.id)}\n        color=\"danger\"\n      >\n        <MDBIcon size=\"sm\" icon=\"trash-alt\" />\n      </MDBBtn>\n    </td>\n  );\n}\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport { MDBTable, MDBTableBody } from \"mdbreact\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useSelector } from \"react-redux\";\n\nfunction Todos(props) {\n  const todos = useSelector((state) => state.todos);\n\n  const todosStyle = {\n    width: \"500px\",\n    margin: \"auto\",\n    padding: \"25px\",\n    textAlign: \"left\",\n  };\n  const renderTodos = () => {\n    return (\n      <MDBTable hover style={todosStyle}>\n        <MDBTableBody>\n          {todos.map((todo) => {\n            return (\n              <tr key={todo.id}>\n                <Todo\n                  onTodoEditSave={props.onTodoEditSave}\n                  todo={todo}\n                  deleteTodo={props.deleteTodo}\n                  markTodo={props.markTodo}\n                />\n              </tr>\n            );\n          })}\n        </MDBTableBody>\n      </MDBTable>\n    );\n  };\n  return todos.length === 0 ? \"Add some todos:)\" : renderTodos();\n}\nexport default Todos;\n","import React from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\nimport styled from \"styled-components\";\n\nconst StyledClearBtn = styled(IconButton)`\n  span {\n    color: black;\n  }\n  :hover {\n    span {\n      color: #22558c;\n    }\n  }\n`;\n\nexport default function (props) {\n  return (\n    <StyledClearBtn onClick={() => props.clearTodos()}>\n      <RestoreIcon fontSize=\"default\" />\n    </StyledClearBtn>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport AddTodoForm from \"./components/AddTodoForm\";\nimport Todos from \"./components/Todos\";\nimport ClearTodos from \"./components/ClearTodos\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./App.css\";\n\nconst axios = require(\"axios\").default;\n\nfunction App() {\n  const todos = useSelector((state) => state.todos);\n  const loadingTodos = useSelector((state) => state.loadingTodos);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetch(`http://${process.env.REACT_APP_BACKEND_URL}:8080/todos`, {\n      method: \"GET\",\n    })\n      .then((Response) => Response.json())\n      .then((json) => {\n        dispatch({\n          type: \"SET_TODOS\",\n          val: json,\n        });\n        dispatch({\n          type: \"SET_LOADING_TODOS\",\n          val: false,\n        });\n      })\n      .catch((err) => console.log(err));\n  }, [dispatch]);\n\n  const addTodo = (text) => {\n    axios\n      .post(`http://${process.env.REACT_APP_BACKEND_URL}:8080/todos`, {\n        text: text,\n      })\n      .then((response) => {\n        if (response.statusText === \"OK\") {\n          let newTodos = [response.data, ...todos];\n          dispatch({\n            type: \"SET_TODOS\",\n            val: newTodos,\n          });\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n  const deleteTodo = (id) => {\n    axios\n      .delete(`http://${process.env.REACT_APP_BACKEND_URL}:8080/todos/${id}`)\n      .then((response) => {\n        if (response.statusText === \"OK\") {\n          let filtered = todos.filter((todo) => todo.id !== id);\n          dispatch({\n            type: \"SET_TODOS\",\n            val: filtered,\n          });\n        }\n      });\n  };\n  const markTodo = (parTodo) => {\n    let urlPerk = \"\";\n    parTodo.completed ? (urlPerk = \"incomplete\") : (urlPerk = \"complete\");\n    axios\n      .post(\n        `http://${process.env.REACT_APP_BACKEND_URL}:8080/todos/${parTodo.id}/${urlPerk}`\n      )\n      .then((response) => {\n        if (response.statusText === \"OK\") {\n          let updatedTodos = todos.map((todo) => {\n            if (todo.id === parTodo.id) {\n              todo.completed = !todo.completed;\n            }\n            return todo;\n          });\n          dispatch({\n            type: \"SET_TODOS\",\n            val: updatedTodos,\n          });\n        }\n      });\n  };\n  const onTodoEditSave = (id, val) => {\n    axios\n      .post(`http://${process.env.REACT_APP_BACKEND_URL}:8080/todos/${id}`, {\n        text: val,\n      })\n      .then((response) => {\n        if (response.statusText === \"OK\") {\n          let updatedTodos = todos.map((todo) => {\n            if (todo.id === id) {\n              todo.text = val;\n            }\n            return todo;\n          });\n          dispatch({\n            type: \"SET_TODOS\",\n            val: updatedTodos,\n          });\n        }\n      });\n  };\n\n  const clearTodos = () => {\n    todos.map((todo) => {\n      return axios.delete(\n        `http://${process.env.REACT_APP_BACKEND_URL}:8080/todos/${todo.id}`\n      );\n    });\n    dispatch({\n      type: \"SET_TODOS\",\n      val: [],\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <AddTodoForm addTodo={addTodo} />\n      {loadingTodos ? (\n        <p>Loading your todos</p>\n      ) : (\n        <Todos\n          onTodoEditSave={onTodoEditSave}\n          markTodo={markTodo}\n          deleteTodo={deleteTodo}\n        />\n      )}\n      {todos.length > 1 ? <ClearTodos clearTodos={clearTodos} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n  todos: [],\n  loadingTodos: true,\n  addTodoValue: \"\",\n};\n\nconst rootReducer = (state = initialState, action) => {\n  let newState = { ...state };\n  switch (action.type) {\n    case \"SET_TODOS\":\n      newState.todos = action.val;\n      return newState;\n    case \"SET_LOADING_TODOS\": // maybe make its own reducer which only accepts boolean values\n      newState.loadingTodos = action.val;\n      return newState;\n    case \"SET_ADD_TODO_VALUE\":\n      newState.addTodoValue = action.val;\n      return newState;\n    default:\n      return newState;\n  }\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}